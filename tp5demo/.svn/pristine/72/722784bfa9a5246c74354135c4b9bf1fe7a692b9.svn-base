<?php
// require_once 'Core.php';
// require_once 'Net.php';
// require_once '../conf/Config.php';
// require_once '../utils/Log.php';

namespace Api\Server\Pay\Wxpay\Lib_1;

use Api\Server\Pay\Wxpay\Lib_1\Core;
use Api\Server\Pay\Wxpay\Lib_1\Net;
use Api\Server\Pay\Wxpay\Lib_1\Config;
use Api\Server\Pay\Wxpay\Lib_1\Log;

if(function_exists("date_default_timezone_set")){
    date_default_timezone_set(Config::$timezone);
}
/**
 * 
 * @author Jupiter
 * 接口服务类
 * 
 * 用于处理通知以及查询等请求
 */
class Services{
    /**
     * 查询处理方法
     * @param array $req
     * @param array $para
     */
    public static function queryOrder(Array $req,Array &$para){
        //组合报文
        $req_str=self::buildReq($req);
        Log::outLog("订单查询(商户->中怡同创)", $req_str);
        //推送给中小开发者支付系统
        $resp_str=Net::sendMessage($req_str, Config::$query_url);
        Log::outLog("订单查询(商户->中怡同创)", $resp_str);
        //验证签名
        return self::verifyResponse($resp_str, $para);
    }
    
    private static function buildReq(Array $req){
        return Core::createLinkString($req, false, true);
    }
    
    public static function verifySignature($para){
        $respSignature=$para[Config::SIGNATURE_KEY];
        Log::outLog("原签名", $respSignature);
        $filteredReq=Core::paraFilter($para);
        $signature=Core::buildSignature($filteredReq);
        Log::outLog("核对签名", $signature);
        if ($respSignature!=""&&$respSignature==$signature) {
            return TRUE;
        }else {
            return FALSE;
        }
    }
    
    public static function buildSignature(Array $para){
        $filteredReq=Core::paraFilter($para);
        return Core::buildSignature($filteredReq);
    }
    
    public static function verifyResponse($resp_str,&$resp){
        if ($resp_str!="") {
            parse_str($resp_str,$para);
            
            $signIsValid=self::verifySignature($para);
            $resp=$para;
            if ($signIsValid) {
                return TRUE;
            }else{
                return FALSE;
            }
        }
    }

	/**
	 * 执行一个 HTTP 请求
	 *
	 * @param string 	$Url 	执行请求的Url
	 * @param mixed	$Params 表单参数
	 * @param string	$Method 请求方法 post / get
	 * @return array 结果数组
	 */
	public static function payback($Url, $Params, $Method='post'){
		$rs = 0;
		$Curl = curl_init();//初始化curl

		if ('get' == $Method){//以GET方式发送请求
			curl_setopt($Curl, CURLOPT_URL, "$Url?$Params");
		}else{//以POST方式发送请求
			curl_setopt($Curl, CURLOPT_URL, $Url);
			curl_setopt($Curl, CURLOPT_POST, 1);//post提交方式
			curl_setopt($Curl, CURLOPT_POSTFIELDS, $Params);//设置传送的参数
		}

		curl_setopt($Curl, CURLOPT_HEADER, false);//设置header
		curl_setopt($Curl, CURLOPT_RETURNTRANSFER, true);//要求结果为字符串且输出到屏幕上
		//curl_setopt($Curl, CURLOPT_CONNECTTIMEOUT, 3);//设置等待时间

		$Res = curl_exec($Curl);//运行curl
		
		if ( $Res == 'success') {
			$rs = 1;
		} else {
			$rs = 0;
		}
		curl_close($Curl);//关闭curl
		
		return $rs;
	}
}